// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/protoCache.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProtoCache_GetCacheItem_FullMethodName    = "/protoCache/GetCacheItem"
	ProtoCache_SetCacheItem_FullMethodName    = "/protoCache/SetCacheItem"
	ProtoCache_RemoveCacheItem_FullMethodName = "/protoCache/RemoveCacheItem"
)

// ProtoCacheClient is the client API for ProtoCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoCacheClient interface {
	GetCacheItem(ctx context.Context, in *GetCacheItemRequest, opts ...grpc.CallOption) (*GetCacheItemResponse, error)
	SetCacheItem(ctx context.Context, in *SetCacheItemRequest, opts ...grpc.CallOption) (*SetCacheItemResponse, error)
	RemoveCacheItem(ctx context.Context, in *RemoveCacheItemRequest, opts ...grpc.CallOption) (*RemoveCacheItemResponse, error)
}

type protoCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoCacheClient(cc grpc.ClientConnInterface) ProtoCacheClient {
	return &protoCacheClient{cc}
}

func (c *protoCacheClient) GetCacheItem(ctx context.Context, in *GetCacheItemRequest, opts ...grpc.CallOption) (*GetCacheItemResponse, error) {
	out := new(GetCacheItemResponse)
	err := c.cc.Invoke(ctx, ProtoCache_GetCacheItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoCacheClient) SetCacheItem(ctx context.Context, in *SetCacheItemRequest, opts ...grpc.CallOption) (*SetCacheItemResponse, error) {
	out := new(SetCacheItemResponse)
	err := c.cc.Invoke(ctx, ProtoCache_SetCacheItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoCacheClient) RemoveCacheItem(ctx context.Context, in *RemoveCacheItemRequest, opts ...grpc.CallOption) (*RemoveCacheItemResponse, error) {
	out := new(RemoveCacheItemResponse)
	err := c.cc.Invoke(ctx, ProtoCache_RemoveCacheItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoCacheServer is the server API for ProtoCache service.
// All implementations must embed UnimplementedProtoCacheServer
// for forward compatibility
type ProtoCacheServer interface {
	GetCacheItem(context.Context, *GetCacheItemRequest) (*GetCacheItemResponse, error)
	SetCacheItem(context.Context, *SetCacheItemRequest) (*SetCacheItemResponse, error)
	RemoveCacheItem(context.Context, *RemoveCacheItemRequest) (*RemoveCacheItemResponse, error)
	mustEmbedUnimplementedProtoCacheServer()
}

// UnimplementedProtoCacheServer must be embedded to have forward compatible implementations.
type UnimplementedProtoCacheServer struct {
}

func (UnimplementedProtoCacheServer) GetCacheItem(context.Context, *GetCacheItemRequest) (*GetCacheItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheItem not implemented")
}
func (UnimplementedProtoCacheServer) SetCacheItem(context.Context, *SetCacheItemRequest) (*SetCacheItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCacheItem not implemented")
}
func (UnimplementedProtoCacheServer) RemoveCacheItem(context.Context, *RemoveCacheItemRequest) (*RemoveCacheItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCacheItem not implemented")
}
func (UnimplementedProtoCacheServer) mustEmbedUnimplementedProtoCacheServer() {}

// UnsafeProtoCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoCacheServer will
// result in compilation errors.
type UnsafeProtoCacheServer interface {
	mustEmbedUnimplementedProtoCacheServer()
}

func RegisterProtoCacheServer(s grpc.ServiceRegistrar, srv ProtoCacheServer) {
	s.RegisterService(&ProtoCache_ServiceDesc, srv)
}

func _ProtoCache_GetCacheItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoCacheServer).GetCacheItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoCache_GetCacheItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoCacheServer).GetCacheItem(ctx, req.(*GetCacheItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoCache_SetCacheItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCacheItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoCacheServer).SetCacheItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoCache_SetCacheItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoCacheServer).SetCacheItem(ctx, req.(*SetCacheItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoCache_RemoveCacheItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCacheItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoCacheServer).RemoveCacheItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoCache_RemoveCacheItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoCacheServer).RemoveCacheItem(ctx, req.(*RemoveCacheItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoCache_ServiceDesc is the grpc.ServiceDesc for ProtoCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoCache",
	HandlerType: (*ProtoCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCacheItem",
			Handler:    _ProtoCache_GetCacheItem_Handler,
		},
		{
			MethodName: "SetCacheItem",
			Handler:    _ProtoCache_SetCacheItem_Handler,
		},
		{
			MethodName: "RemoveCacheItem",
			Handler:    _ProtoCache_RemoveCacheItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protoCache.proto",
}
